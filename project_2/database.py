import pymongo
from pymongo import MongoClient
import csv
import configparser

"""
Connection Information
"""
config = configparser.ConfigParser()
config.read('config.ini')
connection_string = config['database']['mongo_connection']

#######################
# Initialization Info #
#######################
customers = None
products = None
orders = None

customers_keys = ('firstName', 'lastName',
                  'street', 'city', 'state', 'zip')
products_keys = ('name', 'price')
orders_keys = ('customerId', 'productId', 'date')

#######
# Because ids are uniquely generated by mongodb
# were going to have to get those ourselves
# to fill order data
#######


"""
Utilities
"""


def to_list(keys, document):
    record = []
    for key in keys:
        record.append(document[key])
    return record


def join(keys, document, record):
    for key in keys:
        record.append(document[key])
    return record


def load_data():
    customers = list()
    with open('customers.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile)
        for row in spamreader:
            customers.append(row)

    products = list()
    with open('products.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile)
        for row in spamreader:
            products.append(row)
    return [customers, products]

######################
# End Initialization #
######################

def initialize():

    existing = customers.find({})

    if existing.count() < 1:
        data = load_data()
        for d in data[0]:
            upsert_customer(d)
        for d in data[1]:
            upsert_order(d)

def get_customers():
    return list()


def get_customer(id):
    """
    TODO: How are we handling ids? Do we need to, when inserting a new
    customer, create a field for id ('id' : ObjectId(), ...)?
    """
    query = {}

    if id:
        query = {"id" : ObjectId(id)}


def upsert_customer(customer):
    """
    TODO: Needs to handle two cases: if the customer does not exist in the
    database and if the customer already exists in the database
    """
    customers.insert_one({'firstName' : customer[0], 'lastName' : customer[1], \
                        'street' : customer[2], 'city' : customer[3], \
                        'state' : customer[4], 'zip' : customer[5]})


def delete_customer(id):
    return None


def get_products():
    return list()


def get_product(id):
    return None


def upsert_product(product):
    return None


def delete_product(id):
    return None


def get_orders():
    return list()


def get_order(id):
    return None


def upsert_order(order):
    return None


def delete_order(id):
    return None


def customer_report(id):
    return None


# Pay close attention to what is being returned here.  Each product in the products
# list is a dictionary, that has all product attributes + last_order_date, total_sales, and
# gross_revenue.  This is the function that needs to be use Redis as a cache.

# - When a product dictionary is computed, save it as a hash in Redis with the product's
#   ID as the key.  When preparing a product dictionary, before doing the computation,
#   check if its already in redis!
def sales_report():
    return list()

############################
# Connects to the database #
############################


def connect_to_db(conn_str):
    global customers
    global products
    global orders
    client = MongoClient(conn_str)
    customers = client.project2.customers
    products = client.project2.products
    orders = client.project2.orders
    return client


conn = connect_to_db(connection_string)
initialize()
